// Code generated by mockery v2.42.3. DO NOT EDIT.

package doctor_repository_contract

import (
	context "context"

	entities "github.com/jfelipearaujo-healthmed/user-service/internal/core/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id uint) (*entities.Doctor, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Doctor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Doctor, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Doctor); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Doctor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMedicalID provides a mock function with given fields: ctx, medicalID, userIdToIgnore
func (_m *MockRepository) GetByMedicalID(ctx context.Context, medicalID string, userIdToIgnore uint) (*entities.Doctor, error) {
	ret := _m.Called(ctx, medicalID, userIdToIgnore)

	if len(ret) == 0 {
		panic("no return value specified for GetByMedicalID")
	}

	var r0 *entities.Doctor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) (*entities.Doctor, error)); ok {
		return rf(ctx, medicalID, userIdToIgnore)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) *entities.Doctor); ok {
		r0 = rf(ctx, medicalID, userIdToIgnore)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Doctor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, medicalID, userIdToIgnore)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
