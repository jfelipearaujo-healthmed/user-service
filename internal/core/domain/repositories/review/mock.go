// Code generated by mockery v2.42.3. DO NOT EDIT.

package review_repository_contract

import (
	context "context"

	entities "github.com/jfelipearaujo-healthmed/user-service/internal/core/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, review
func (_m *MockRepository) Create(ctx context.Context, review *entities.Review) (*entities.Review, error) {
	ret := _m.Called(ctx, review)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Review) (*entities.Review, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Review) *entities.Review); ok {
		r0 = rf(ctx, review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockRepository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDoctorID provides a mock function with given fields: ctx, doctorID
func (_m *MockRepository) GetByDoctorID(ctx context.Context, doctorID uint) (*entities.Review, error) {
	ret := _m.Called(ctx, doctorID)

	if len(ret) == 0 {
		panic("no return value specified for GetByDoctorID")
	}

	var r0 *entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Review, error)); ok {
		return rf(ctx, doctorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Review); ok {
		r0 = rf(ctx, doctorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, reviewID, userID, isDoctor
func (_m *MockRepository) GetByID(ctx context.Context, reviewID uint, userID uint, isDoctor bool) (*entities.Review, error) {
	ret := _m.Called(ctx, reviewID, userID, isDoctor)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, bool) (*entities.Review, error)); ok {
		return rf(ctx, reviewID, userID, isDoctor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, bool) *entities.Review); ok {
		r0 = rf(ctx, reviewID, userID, isDoctor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, bool) error); ok {
		r1 = rf(ctx, reviewID, userID, isDoctor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ctx, patientID, doctorID, appointmentID
func (_m *MockRepository) GetByIDs(ctx context.Context, patientID uint, doctorID uint, appointmentID uint) (*entities.Review, error) {
	ret := _m.Called(ctx, patientID, doctorID, appointmentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 *entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, uint) (*entities.Review, error)); ok {
		return rf(ctx, patientID, doctorID, appointmentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, uint) *entities.Review); ok {
		r0 = rf(ctx, patientID, doctorID, appointmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, uint, uint) error); ok {
		r1 = rf(ctx, patientID, doctorID, appointmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPatientID provides a mock function with given fields: ctx, patientID
func (_m *MockRepository) GetByPatientID(ctx context.Context, patientID uint) (*entities.Review, error) {
	ret := _m.Called(ctx, patientID)

	if len(ret) == 0 {
		panic("no return value specified for GetByPatientID")
	}

	var r0 *entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Review, error)); ok {
		return rf(ctx, patientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Review); ok {
		r0 = rf(ctx, patientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, patientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, userID, isDoctor
func (_m *MockRepository) List(ctx context.Context, userID uint, isDoctor bool) ([]entities.Review, error) {
	ret := _m.Called(ctx, userID, isDoctor)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, bool) ([]entities.Review, error)); ok {
		return rf(ctx, userID, isDoctor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, bool) []entities.Review); ok {
		r0 = rf(ctx, userID, isDoctor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, bool) error); ok {
		r1 = rf(ctx, userID, isDoctor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, review
func (_m *MockRepository) Update(ctx context.Context, review *entities.Review) (*entities.Review, error) {
	ret := _m.Called(ctx, review)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Review) (*entities.Review, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Review) *entities.Review); ok {
		r0 = rf(ctx, review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
